{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\I\\\\Test\\\\frontend\\\\src\\\\components\\\\TypingAnimation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingAnimation = ({\n  strings,\n  typeSpeed = 100,\n  backspaceSpeed = 50,\n  delayBeforeStart = 1000,\n  delayAfterCompletion = 1000\n}) => {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [arrayIndex, setArrayIndex] = useState(0);\n  const [charIndex, setCharIndex] = useState(0);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  // Function to set the typing effect\n  const typeCharacter = () => {\n    if (!isDeleting) {\n      setText(prev => prev + strings[arrayIndex].charAt(charIndex));\n      setCharIndex(prev => prev + 1);\n    }\n  };\n\n  // Function to set the deleting effect\n  const deleteCharacter = () => {\n    if (isDeleting) {\n      setText(prev => prev.substring(0, prev.length - 1));\n      setCharIndex(prev => prev - 1);\n    }\n  };\n  useEffect(() => {\n    // If we've gone through all strings, start from the beginning\n    if (arrayIndex >= strings.length) {\n      setArrayIndex(0);\n      return;\n    }\n    if (charIndex === strings[arrayIndex].length && !isDeleting) {\n      // If finished typing a word, start deleting\n      setTimeout(() => setIsDeleting(true), delayAfterCompletion);\n      return;\n    }\n    if (charIndex === 0 && isDeleting) {\n      // If finished deleting, move to the next word and start typing\n      setIsDeleting(false);\n      setArrayIndex(prev => (prev + 1) % strings.length);\n      return;\n    }\n    const timerId = setTimeout(() => {\n      if (isDeleting) {\n        deleteCharacter();\n      } else {\n        typeCharacter();\n      }\n    }, isDeleting ? backspaceSpeed : typeSpeed);\n\n    // Cleanup function\n    return () => clearTimeout(timerId);\n  }, [charIndex, arrayIndex, isDeleting, strings, typeSpeed, backspaceSpeed, delayAfterCompletion]);\n\n  // You need to ensure the styling is correct for your text. The size issue might be related to missing CSS.\n  // Here, we're wrapping the text in a \"span\" and applying a class for styling.\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"typing\",\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 10\n  }, this);\n};\n_s(TypingAnimation, \"4+q8Aj1CSvGdpSvnRIcUD01vaso=\");\n_c = TypingAnimation;\nexport default TypingAnimation;\nvar _c;\n$RefreshReg$(_c, \"TypingAnimation\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TypingAnimation","strings","typeSpeed","backspaceSpeed","delayBeforeStart","delayAfterCompletion","_s","text","setText","arrayIndex","setArrayIndex","charIndex","setCharIndex","isDeleting","setIsDeleting","typeCharacter","prev","charAt","deleteCharacter","substring","length","setTimeout","timerId","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Administrator/Documents/I/Test/frontend/src/components/TypingAnimation.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst TypingAnimation = ({\r\n  strings,\r\n  typeSpeed = 100,\r\n  backspaceSpeed = 50,\r\n  delayBeforeStart = 1000,\r\n  delayAfterCompletion = 1000,\r\n}) => {\r\n  const [text, setText] = useState(\"\");\r\n  const [arrayIndex, setArrayIndex] = useState(0);\r\n  const [charIndex, setCharIndex] = useState(0);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n\r\n  // Function to set the typing effect\r\n  const typeCharacter = () => {\r\n    if (!isDeleting) {\r\n      setText((prev) => prev + strings[arrayIndex].charAt(charIndex));\r\n      setCharIndex((prev) => prev + 1);\r\n    }\r\n  };\r\n\r\n  // Function to set the deleting effect\r\n  const deleteCharacter = () => {\r\n    if (isDeleting) {\r\n      setText((prev) => prev.substring(0, prev.length - 1));\r\n      setCharIndex((prev) => prev - 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // If we've gone through all strings, start from the beginning\r\n    if (arrayIndex >= strings.length) {\r\n      setArrayIndex(0);\r\n      return;\r\n    }\r\n\r\n    if (charIndex === strings[arrayIndex].length && !isDeleting) {\r\n      // If finished typing a word, start deleting\r\n      setTimeout(() => setIsDeleting(true), delayAfterCompletion);\r\n      return;\r\n    }\r\n\r\n    if (charIndex === 0 && isDeleting) {\r\n      // If finished deleting, move to the next word and start typing\r\n      setIsDeleting(false);\r\n      setArrayIndex((prev) => (prev + 1) % strings.length);\r\n      return;\r\n    }\r\n\r\n    const timerId = setTimeout(\r\n      () => {\r\n        if (isDeleting) {\r\n          deleteCharacter();\r\n        } else {\r\n          typeCharacter();\r\n        }\r\n      },\r\n      isDeleting ? backspaceSpeed : typeSpeed\r\n    );\r\n\r\n    // Cleanup function\r\n    return () => clearTimeout(timerId);\r\n  }, [\r\n    charIndex,\r\n    arrayIndex,\r\n    isDeleting,\r\n    strings,\r\n    typeSpeed,\r\n    backspaceSpeed,\r\n    delayAfterCompletion,\r\n  ]);\r\n\r\n  // You need to ensure the styling is correct for your text. The size issue might be related to missing CSS.\r\n  // Here, we're wrapping the text in a \"span\" and applying a class for styling.\r\n  return <span className=\"typing\">{text}</span>;\r\n};\r\n\r\nexport default TypingAnimation;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,eAAe,GAAGA,CAAC;EACvBC,OAAO;EACPC,SAAS,GAAG,GAAG;EACfC,cAAc,GAAG,EAAE;EACnBC,gBAAgB,GAAG,IAAI;EACvBC,oBAAoB,GAAG;AACzB,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACA,MAAMkB,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAACF,UAAU,EAAE;MACfL,OAAO,CAAEQ,IAAI,IAAKA,IAAI,GAAGf,OAAO,CAACQ,UAAU,CAAC,CAACQ,MAAM,CAACN,SAAS,CAAC,CAAC;MAC/DC,YAAY,CAAEI,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAIL,UAAU,EAAE;MACdL,OAAO,CAAEQ,IAAI,IAAKA,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEH,IAAI,CAACI,MAAM,GAAG,CAAC,CAAC,CAAC;MACrDR,YAAY,CAAEI,IAAI,IAAKA,IAAI,GAAG,CAAC,CAAC;IAClC;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd;IACA,IAAIa,UAAU,IAAIR,OAAO,CAACmB,MAAM,EAAE;MAChCV,aAAa,CAAC,CAAC,CAAC;MAChB;IACF;IAEA,IAAIC,SAAS,KAAKV,OAAO,CAACQ,UAAU,CAAC,CAACW,MAAM,IAAI,CAACP,UAAU,EAAE;MAC3D;MACAQ,UAAU,CAAC,MAAMP,aAAa,CAAC,IAAI,CAAC,EAAET,oBAAoB,CAAC;MAC3D;IACF;IAEA,IAAIM,SAAS,KAAK,CAAC,IAAIE,UAAU,EAAE;MACjC;MACAC,aAAa,CAAC,KAAK,CAAC;MACpBJ,aAAa,CAAEM,IAAI,IAAK,CAACA,IAAI,GAAG,CAAC,IAAIf,OAAO,CAACmB,MAAM,CAAC;MACpD;IACF;IAEA,MAAME,OAAO,GAAGD,UAAU,CACxB,MAAM;MACJ,IAAIR,UAAU,EAAE;QACdK,eAAe,CAAC,CAAC;MACnB,CAAC,MAAM;QACLH,aAAa,CAAC,CAAC;MACjB;IACF,CAAC,EACDF,UAAU,GAAGV,cAAc,GAAGD,SAChC,CAAC;;IAED;IACA,OAAO,MAAMqB,YAAY,CAACD,OAAO,CAAC;EACpC,CAAC,EAAE,CACDX,SAAS,EACTF,UAAU,EACVI,UAAU,EACVZ,OAAO,EACPC,SAAS,EACTC,cAAc,EACdE,oBAAoB,CACrB,CAAC;;EAEF;EACA;EACA,oBAAON,OAAA;IAAMyB,SAAS,EAAC,QAAQ;IAAAC,QAAA,EAAElB;EAAI;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AAC/C,CAAC;AAACvB,EAAA,CA1EIN,eAAe;AAAA8B,EAAA,GAAf9B,eAAe;AA4ErB,eAAeA,eAAe;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}